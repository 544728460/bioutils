#! /usr/bin/env perl

=head1 NAME

    get_cg_flu.pl - Get complete genome flu virus from database.

=SYNOPSIS

=DESCRIPTION

=AUTHOR

    zeroliu-at-gmail-dot-com

=VERSION

    0.0.1   - 2018-03-27

=cut

use 5.010;
use strict;
use warnings;

use DBI;
use Smart::Comments;

my $fdb     = shift or die usage();
my $fout    = shift // 'fout.ffn';

our $dbh;

die "[ERROR] Connect to database failed!\n"
    unless ($dbh = conn_db($fdb));

my $sql_str = << "EOS";
SELECT 
    s.accession,
    v.strain,
    v.serotype,
    v.collect_date,
    s.segment,
    s.seq,
    v.taxon_id,
    s.mod_date
FROM
    virus AS v, sequence AS s
WHERE
    v.id = s.vir_id
  AND
    v.genotype = 'A'
  AND
    v.collect_date > '2018'
EOS

my $sth;

eval {
    $sth    = $dbh->prepare($sql_str);
    $sth->execute();
};

if ($@) {
    warn "[ERROR] Query \n'$sql_str'\n failed!\n$@\n";

    $dbh->disconnect();

    exit 1;
}

my %results;


while (my $rh_row = $sth->fetchrow_hashref) {
    my $taxon_id    = $rh_row->{'taxon_id'};
    my $mod_date    = $rh_row->{'mod_date'};
    my $segment     = $rh_row->{'segment'};

    ### $taxon_id

    $results{$taxon_id}->{$mod_date} = {
        $segment    = (
            'accession'     => $rh_row->{'accession'},
            'strain'        => $rh_row->{'strain'},
            'serotype'      => $rh_row->{'serotype'},
            'collect_date'  => $rh_row->{'collect_date'},
            'seq'           => $rh_row->{'seq'},
        ),
    };
}

### %results;

open my $fh_out, ">", $fout
    or die "[ERROR] Create output file '$fout' failed!\n$!\n";

$fh_out->close;

$dbh->disconnect;

exit 0;

#===========================================================
#
#                   Subroutines
#
#===========================================================

=pod

  Name:     usage 
  Usage:    usage()
  Function: Print usage information
  Returns:  None
  Args:     None

=cut

sub usage {
    say << "EOS";
Get complete genome flu virus sequences from database.
Usage:
  get_cg_flu.pl <fdb> [fout]
Args:
  fdb   A SQLite3 database file, which have to be generated by
        'load_gbvirus.pl'.
  fout  Output Multi-FASTA sequence file. Optional.
EOS
}

=pod

  Name:     conn_db()
  Usage:    conn_db($fdb)
  Function: Connect to given database '$fdb'
  Args:     A SQLite3 database filename
  Returns:  A database handle

=cut

sub conn_db {
    my ($fdb)   = @_;

    unless (-f $fdb) {
        warn "[ERROR] SQLite3 database file '$fdb' error!\n";
        return;
    }

    my $dbh;

    eval {
        $dbh    = DBI->connect(
            "dbi:SQLite:dbname=$fdb",
            "", "",
            {
                RaiseError  => 1,
                PrintError  => 1,
                AutoCommit  => 1,
            }
        ) or die $DBI::errstr, "\n";
    };

    if ($@) {
        warn "[ERROR] Connect to SQLite3 database '$fdb' failed!\n$@\n";

        return;
    }

    return $dbh;
}
