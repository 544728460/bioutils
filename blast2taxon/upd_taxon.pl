#!/usr/bin/perl

=head1 NAME

    upd_taxon.pl - Update taxonomy information of BLAST result database
                   generated by 'load_blast2db.pl'

=head1 SYNOPSIS

=head1 DESCRIPTION

    In the script "load_blast2db.pl", the taxonomy operation is fulfilled
    after the parse of BLAST report completed.


=head1 AUTHOR

    zeroliu-at-gmail-dot-com

=head1 VERSION

    0.0.1   2016-01-22

=cut

use 5.010;
use strict;
use warnings;
use List::MoreUtils qw(uniq);

use DBI;
use Smart::Comments;

#===========================================================

my $db_gi4tax   = '/data/db/taxon/gi4tax.db';
my $db_taxon    = '/data/db/taxon/taxon.db';

die "[FATAL] Local NCBI taxonomy database NOT found"
    unless (-e $db_gi4tax && -e $db_taxon);

#===========================================================

my $usage   = << "EOS";
Update taxonomy information for BLAST report database.
Usage:
  upd_taxon.pl <db>
Args:
  <db>  - Database file name
EOS

my $fdb = shift 
    or die $usage;

our $dbh    = conn_db($fdb);

die "[ERROR] Connect to database '$fdb' failed!"
	unless (defined $dbh);
	
die "[ERROR] Setupt PRAGMA failed!\n"
	unless ( en_db_bulk_ins($dbh) );

#
# Query table 'analysis' to get all GIs
#
my $ra_gis  = query_uniq_gis() || die "<== 3";

say "==> Total unique GIs:\t", scalar( @{ $ra_gis } ), "\n";

#=====================================================================
#
# Query 'gi4tax.db' to get related tax_id for each gi.
# Then update table 'result'
#
#=====================================================================

my $rh_gi_taxid = query_gi4tax( $ra_gis );

# upd_tbl_result($rh_gi_taxid) || die "<== 4\n";

say "Parse tax_id for gi finished!"; 
say	"Next step: Get taxnomy details according to taxid.";
say "\n", '=' x 60, "\n";

my @uniq_taxids = uniq( values %{ $rh_gi_taxid } );

say "==> Total unique taxids:\t", scalar( @uniq_taxids ), "\n";

my $rh_taxinfo  = query_taxon( \@uniq_taxids );

# Insert taxonomy information into table 'taxon'
ins_tbl_taxon( $rh_taxinfo ) || die "<== 5\n";

say "[SUCCESS] All data loaded!";

$dbh->disconnect;

exit 0;
#===========================================================
#
#                   Subroutines
#
#===========================================================

=pod
  Name: conn_db($fdb)
  Desc: Connect to an SQLite3 database
  Args: $fdb    - SQLite3 database file
  Ret:  A database handle object
        undef   - All errors.
=cut

sub conn_db {
    my ($fdb)   = @_;

    my $dbh;

	eval {
	    $dbh = DBI->connect(
	        "dbi:SQLite:dbname=$fdb",
	        "", "",
	        {
	            RaiseError  => 1,
	            PrintError  => 1,
	            AutoCommit  => 1,
	        }
	    );
	};

    if ($@) {
        warn "[ERROR] Connect to database '$fdb' failed!\n$@\n";
        return;
    }

    return $dbh;
}

#===========================================================

=pod
  Name: en_db_bulk_ins($dbh)
  Desc: Enable bulk insert for SQLite3 database
  Args: $dbh    - Database handle object
  Ret:  None
        undef   - All errors.
=cut

sub en_db_bulk_ins {
    my ($dbh)   = @_;

    return unless (defined $dbh);

    eval {
        $dbh->do("PRAGMA synchronous = OFF");
        $dbh->do("PRAGMA cache_size  = 500000");    # Cache siez 500M
    };

    if ($@) {
        warn "[ERROR] Setup PRAGMA error:\n", 
            $@, "\n";

        return;
    }

    return 1;
}

#===========================================================

=pod
  Name: query_uniq_gis()
  Desc: Query table 'analysis' to get unique GIs
  Args: None
  Ret:  A reference of array
        undef   - Any errors
=cut

sub query_uniq_gis{
    my $sql = << "EOS";
SELECT 
    DISTINCT hit_gi
FROM
    result
EOS

    my $sth;

    eval {
        $sth = $dbh->prepare($sql);
        $sth->execute;
    };

    if ($@) {
        warn "[ERROR] Query table 'analysis' for 'hit_gi' failed!\n",
            $@, "\n";

        return;
    }

    my @gis;

    while (my $rh_row = $sth->fetchrow_hashref) {
        push @gis, $rh_row->{'hit_gi'};
    }

    return \@gis;
}

#===========================================================

=pod
  Name: query_gi4tax($ra_gis)
  Desc: Query database 'gi4tax.db' to get tax_id 
  Args: $ra_gis - A reference of array
  Ret:  A reference of hash
        undef   - Any errors
=cut

sub query_gi4tax {
    my ($ra_gis)    = @_;

    #
    # Connect to database 'gi4tax'
    #

    my $dbh = conn_db($db_gi4tax);

    my $sql = << "EOS";
SELECT  
    tax_id
FROM
    gi4tax
WHERE   
    gi  = ?
EOS

    my $sth;

    eval {
        $sth = $dbh->prepare($sql);
    };

    if ($@) {
        warn "[ERROR] Prepare query '$sql' failed!\n",
            $@, "\n";

        return;
    }

    my %gi_tax;

    for my $gi ( @{$ra_gis} ) {
        eval {
            $sth->bind_param(1, $gi);
            $sth->execute;

            my $rh_row  = $sth->fetchrow_hashref;

            $gi_tax{ $gi }  = $rh_row->{'tax_id'};

            if ($rh_row = $sth->fetchrow_hashref) {
                warn "[ERROR] Multi taxon entries for GI '$gi'\n";
                $sth->finish;
            }
        };

        if ($@) {
            warn "[ERROR] Query 'gi' for table 'gi4tax' failed!\n",
                $@, "\n";

            last;   # Terminate cycle
        }
    }

    $dbh->disconnect;

    return \%gi_tax;
}

#===========================================================

=pod
  Name: query_taxon($ra_taxids)
  Desc: Query database 'taxon' with tax_ids
  Args: A reference of array
  Ret:  A reference of hash for taxon details
        undef   - Any errors
=cut

sub query_taxon {
    my ($ra_taxids) = @_;

    my $dbh = conn_db( $db_taxon );

    my $sql = << "EOS";
SELECT nd.tax_id AS tax_id,
       nd.parent_tax_id AS parent_tax_id,
       nd.rank AS rank,
       nm.name AS name,
       dv.name AS division
  FROM nodes AS nd, 
       names AS nm, 
       division AS dv
 WHERE nd.tax_id = ?
       AND
       nd.tax_id = nm.tax_id 
       AND
       nd.div_id = dv.div_id
       AND
       nm.class = 'scientific name';
EOS

    my $sth;
     
    # Run "prepare" OUTSIDE the cycle.
    eval {
        $sth    = $dbh->prepare($sql);
    };

    if ($@) {
        warn "[ERROR] Prepare query '$sql' failed!\n",
            $@, "\n";

        return;
    }

    # Store details of all tax_id
    my %tax_info;

    for my $tax_id ( @{ $ra_taxids } ) {
        # say "tax id:\t", $tax_id;

	    # In case there were any tax_id unknown
	    # This happens when a nucleotide or protein sequences were removed
	    # from the GenBank database
        unless (defined $tax_id) {
            warn "[ERROR] Unknow tax_id '$tax_id'\n" ;
            next;
        }

	    my ($parent_tax_id, $rank, $name, $division);
	
	    $parent_tax_id = 0; # Just to restrain the 'uninitialized' warning
	                        # There is NO tax_id = 0, 
	                        # For Root, its tax_id = 1.
	
	    # Loop UNTIL parent is ROOT (of which tax_id = 1)
	    my $cur_tax_id  = $tax_id;
	
	    while ( $parent_tax_id != 1) {  
	        # my $ra_ret = query_tax_info($cur_tax_id, $dbh, $sth);
	
	        # ($parent_tax_id, $rank, $name, $division) = @{ $ra_ret };

            ($parent_tax_id, $rank, $name, $division) 
                = query_tax_info($cur_tax_id, $dbh, $sth);
	
	        ## tax id:         $tax_id
	        ## parent tax id:  $parent_tax_id
	        ## rank:           $rank
	        ## name:           $name
	        ## division:       $division
	
            unless (defined $parent_tax_id && defined $rank
                        && defined $name && defined $division) {
                say "==> Un-identified tax id:\t", $tax_id;
                last;
            }
	       
	        $tax_info{$tax_id}->{$rank}      = $name;

	 	    $tax_info{$tax_id}->{'division'} = $division;
	 	
	        # Generate taxonomy hierarchy tree
	        # Hierarchy rank
	     
	        if (defined $tax_info{$tax_id}->{'hier'}) {
	            $tax_info{$tax_id}->{'hier'} 
	                = $rank . '; ' . $tax_info{$tax_id}->{'hier'};
	        }
	        else {
	            $tax_info{$tax_id}->{'hier'} = $rank;
	        }
	
	        # Hierarchy rank name
	        
	        if (defined $tax_info{$tax_id}->{'hier_name'}) {
	            $tax_info{$tax_id}->{'hier_name'} 
	                = $name . '; ' . $tax_info{$tax_id}->{'hier_name'};
	        }
	        else {
	            $tax_info{$tax_id}->{'hier_name'} = $name;
	        }
	
	        $cur_tax_id = $parent_tax_id;
        }
    }
    $dbh->disconnect;

    return \%tax_info;
}

=pod
  Name: query_tax_info
  Desc: query_tax_info( $tax_id, $dbh, $sth)
  Func: Query taxon SQLite3 database on table 'nodes', 'names' and 
        'division', to retrieve related information
  Args: $tax_id     A NCBI taxonomy id
  Ret:  A reference of an array
=cut

sub query_tax_info {
    my ($tax_id, $dbh, $sth) = @_;

    my ($parent_tax_id, $rank, $name, $division);

    eval {
        $sth->bind_param(1, $tax_id);

        $sth->execute;

        my $rh_row = $sth->fetchrow_hashref;

        $parent_tax_id   = $rh_row->{'parent_tax_id'};
        $rank            = $rh_row->{'rank'};
        $name            = $rh_row->{'name'};
        $division        = $rh_row->{'division'};

        if ($rh_row = $sth->fetchrow_hashref) {
            warn "[ERROR] Multi entries for taxon '$tax_id'.";

            $sth->finish;
        }   
    };

    if ($@) {
        warn "[ERROR] Query '$tax_id' failed!\n", $@, "\n";

        return;
    }

    my @ret = ($parent_tax_id, $rank, $name, $division);

    return @ret;
}

#===========================================================

=pod
  Name: ins_tbl_taxon( $rh_taxinfo )
  Desc: Insert taxonomy details into table 'taxon'
  Args: A reference of hash
  Ret:  None
        undef for any errors
=cut

sub ins_tbl_taxon {
    my ($rh_taxinfo)    = @_;

    my $sql = << "EOS";
INSERT INTO taxon (
    tax_id,
    tax_hier,
    tax_hier_name,
    hit_superkingdom,
    hit_kingdom,
    hit_phylum,
    hit_class,
    hit_order,
    hit_family,
    hit_genus,
    hit_species,
    hit_division
)
VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? 
);
EOS

    my $sth;

    eval {
        $sth    = $dbh->prepare( $sql );
    };

    if ($@) {
        warn "[ERROR] Prepare SQL statement '$sql' failed!\n",
            $@, "\n";

        return;
    }

    eval {
        $dbh->begin_work;

        for my $tax_id ( sort keys %{ $rh_taxinfo } ) {
            my $tax_hier            
                    = $rh_taxinfo->{$tax_id}->{'hier'} // '';

            my $tax_hier_name 
                    = $rh_taxinfo->{$tax_id}->{'hier_name'} // '';

            my $hit_superkingdom    
                    = $rh_taxinfo->{$tax_id}->{'superkingdom'} // '';
         
            my $hit_kingdom 
                    = $rh_taxinfo->{$tax_id}->{'superkingdom'} // '';
            
            my $hit_phylum  
                    = $rh_taxinfo->{$tax_id}->{'phylum'} // '';
       
            my $hit_class  
                    = $rh_taxinfo->{$tax_id}->{'class'} // '';
         
            my $hit_order 
                    = $rh_taxinfo->{$tax_id}->{'order'} // '';
        
            my $hit_family  
                    = $rh_taxinfo->{$tax_id}->{'family'} // '';
        
            my $hit_genus   
                    = $rh_taxinfo->{$tax_id}->{'genus'} // '';
          
            my $hit_species 
                    = $rh_taxinfo->{$tax_id}->{'species'} // '';
      
            my $hit_division 
                    =  $rh_taxinfo->{$tax_id}->{'division'} // '';

            $sth->bind_param( 1, $tax_id);
            $sth->bind_param( 2, $tax_hier);
            $sth->bind_param( 3, $tax_hier_name);
            $sth->bind_param( 4, $hit_superkingdom);
            $sth->bind_param( 5, $hit_kingdom);
            $sth->bind_param( 6, $hit_phylum);
            $sth->bind_param( 7, $hit_class);
            $sth->bind_param( 8, $hit_order);
            $sth->bind_param( 9, $hit_family);
            $sth->bind_param(10, $hit_genus);
            $sth->bind_param(11, $hit_species);
            $sth->bind_param(12, $hit_division);

            $sth->execute;
        }

        $dbh->commit;
    };

    if ($@) {
        $dbh->rollback;
        
        warn "[ERROR] Insert into table 'taxon' failed!\n",
            $@, "\n";

        return;
    }

    return 1;
}
