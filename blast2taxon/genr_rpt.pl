#!/usr/bin/perl

=head1 NAME

    genr_rpt.pl - Generate an Excel XLSX report for BLAST taxonomy results.

=head1 SYNOPSIS

=head1 DESCRIPTION

=head2 Structure of %info

    %info = (
        $barcode    => {
            'superkingdom'  => {
                $sk_name        => {
                    'num'           => $number,
                },
            },
            'family'        => {
                $fm_name        => {
                    'num'           => $number,
                    'isVirus'       => BOOL,
                },
            },
            'species'       => {
                $sp_name        => {
                    'num'           => $number,
                    'isVirus'       => BOOL,
                },
            },
        },
    );

    For a read, if both of its BlastN and BlastX results indicated to the
    same taxonomy, they will be combined to ONE.

=head3 NOTE for 'Unknown' taxon

    For 'Unknown' taxon, here considered them as 2 conditions:

    Virus and non-Virus

    So, for 'Unknown' taxon, the %info would be like

    %info = ()
        $barcode    => {
            'superkingdom'  => {
                $sk_name        => {
                    'num'           => $number,
                },
            },
            'family'        => {
                'Unknowm'       => {
                    'num_virus'     => $vir_num,
                    'num'           => $num,    # For ALL families
                },
            },
            'species'       => {
                'Unknown'       => {
                    'num_Virus'     => $vir_num,
                    'num'           => $num,    # For ALL families
                }.
            },
        },
    ;

=head2 Abbreviation:

    fm      family
    sk      sk
    sp      sp

=head1 AUTHOR

    zeroliu-at-gmail-dot-com
    wangjun19820303-at-163-dot-com

=head1 VERSION

    0.0.1   2014-07-29  Generate an Excel XLSX report for BLAST taxonomy
                        reports for 454 assembly results.
    0.1.0   2014-07-31  New algorithm of SQL statement.
    0.1.1   2014-08-05  Output for global summary.
    0.2.1   2014-08-06  Simple output process
    0.2.2   2014-11-12  Fix bug: Statistic virus records by rank
                        New feature: Column chart for each barcode report
    0.2.3   2014-11-13  Fix bug: 'Unknown' taxon for each rank
    0.2.4   2014-11-16  Fix bug: 'Unknown' taxon for the summary XLSX.
    0.3.0   2016-12-12  Adapted for *general* BLAST report analysis prupose.

=cut

use 5.010;
use strict;
use warnings;

use DBI;
use Excel::Writer::XLSX;

use Smart::Comments;

my $usage = << "EOS";
Generate an XLSX report for BLAST taxonomy results.
Usage:
  genr_rpt.pl <db> <pre>
Arguments:
  <db>      An SQLite3 database file generated by script
            'parse_tax4blast.pl'.
  <pre>     Prefix for XLSX files to be created. (Optional)

Note:
If <pre> were provided, a '.' will be appended to <pre> automatically.
EOS

my $db      = shift or die $usage;
my $prefix  = shift || '';

# Append a '.' if $prefix were set
$prefix .= '.' if ($prefix);

#======================================================================
#
# Fetch information from Database
#
#======================================================================

my ($dbh, $sth, $ret, $rh_row);


eval {
    $dbh = DBI->connect(
        "dbi:SQLite:dbname=$db",
        "", "",
        {
            RaiseError  => 1,
            PrintError  => 1,
            AutoCommit  => 1,
        }
    );
};

if ($@) {
    warn "[ERROR] Connect to SQLite3 database '$db' failed!\n",
            $DBI::errstr, "\n";
    exit 1;
}

# Get statistics for each ranks
# Now only ranks 'superkingdom', 'family' and 'species' needed
my @ranks = (
    'superkingdom',
#    'kingdom',
#    'phylum',
#    'class',
#    'order',
    'family',
    'genus',
    'species',
);

##
## Get ranks statistics for ALL orgamisn
##

my %info;

for my $rank ( @ranks ) {
    ## Rank: $rank

    my $rank_name = 'hit_' . $rank; # Rank column name used in table

    my $sql = "
SELECT
    t.barcode           AS barcode,
    t.$rank_name        AS name,
    t.hit_superkingdom  AS superkingdom,
    count(*)            AS num
FROM (
    SELECT
        DISTINCT
            seq_id,
            hit_gi,
            $rank_name,
            hit_superkingdom
    FROM
        tax4blast
) t
GROUP BY
    barcode,
    $rank_name,
    hit_superkingdom
ORDER BY
    barcode
";

#---------------------------------------------------------------------
#
# Trick:
#
# In the previous step, the script "load_blast_tax2db.pl", it treats
# 'unknown' organism as 'Unknown' rather than a blank string ''.
#
# i.e.
# hit_tax_id     = 0
# tax_hier            = 'Unknown'
# tax_hier_name       = 'Unknown'
# hit_superkingdom    = 'Unknown'
# hit_kingdom         = 'Unknown'
# ...
# hit_genus           = 'Unknown'
# hit_species         = 'Unknown'
# hit_division        = 'Unknown'
#
# Here, also treat '' field in the database as 'Unknown'.
#
#---------------------------------------------------------------------

    eval {
        $sth = $dbh->prepare($sql);

        $ret = $sth->execute;

        while (my $rh_row = $sth->fetchrow_hashref) {
            my $bcode       = $rh_row->{'barcode'};

            # If rank name NOT defined, use 'Unknown'
            my $rank_name   = $rh_row->{'name'} || 'Unknown';

            my $superkingdom = $rh_row->{'superkingdom'} || 'Unknown';

            # Deal with 'Unknown' taxon
            # Because of the SQL query, there might be MULTI 'Unknown'
            # taxons for 'family' and 'species' rank.
            # To get the number of ALL 'Unknown' taxons, it need to
            # sum of each entry.
            if ( $rank_name eq 'Unknown' ) {    # Note the '+='
                $info{$bcode}->{$rank}->{$rank_name}->{'num'}
                    += $rh_row->{'num'};
            }
            else {
                $info{$bcode}->{$rank}->{$rank_name}->{'num'}
                    = $rh_row->{'num'};
            }

            # Whether a Virus sequence
            if ( $superkingdom eq 'Viruses' ) {
                ## Virus superkingdom
                ## Rank name: $rank_name
                if ($rank_name eq 'Unknown') {
                    ## Unknown virus
                    $info{$bcode}->{$rank}->{$rank_name}->{'num_Virus'}
                        += $rh_row->{'num'};
                }
                else {
                    $info{$bcode}->{$rank}->{$rank_name}->{'isVirus'} = 1;
                }
            }
            else {
                $info{$bcode}->{$rank}->{$rank_name}->{'isVirus'} = 0;
            }
        }
    };

    if ($@) {
        warn "[ERROR] Query SQL statement '$sql' failed!\n",
            $dbh->errstr, "\n";

        exit 1;
    }
}

## %info

$dbh->disconnect;

##
## END of database operation
##

#======================================================================
#
#               Output into XLSX files of each barcode
#
#======================================================================

for my $bcode ( sort keys %info ) {
    ## Barcode: $bcode
    my $fxlsx   = $prefix . $bcode . '.xlsx';

    print "Generating '$fxlsx' ... ";

    # Generate output XLSX file
	my $wbook = Excel::Writer::XLSX->new( $fxlsx )
        or die "[ERROR] Create Excel file '$fxlsx' failed!\n$!\n";

    # Create related worksheets
    my %ws;

    $ws{'superkingdom'}  = $wbook->add_worksheet('Superkingdoms');
    $ws{'family'}        = $wbook->add_worksheet('Families');
    $ws{'species'}       = $wbook->add_worksheet('Species');

    # For virus ranks, add a 'v' before the rank
    $ws{'vfamily'}       = $wbook->add_worksheet('Virus Families');
    $ws{'vspecies'}      = $wbook->add_worksheet('Virus Species');

    for my $rank ( @ranks ) {
        ## Rank: $rank
        my ( @data, @vdata );

	    for my $rank_name ( sort keys %{ $info{$bcode}->{$rank} } ) {
            ## Rank name: $rank_name
	        my $num   = $info{$bcode}->{$rank}->{$rank_name}->{'num'};
            my $isVir = $info{$bcode}->{$rank}->{$rank_name}->{'isVirus'};

            ##
            ## Deal with 'Unknown' taxon
            ##

            if ( $rank_name eq 'Unknown' ) {    # For 'Unknown' taxon
                my $num_Vir =
                    $info{$bcode}->{$rank}->{'Unknown'}->{'num_Virus'}||0;

                # For ALL taxons of the rank
                my @row = ('Unknown', $num);

                push @data, \@row;

                # For Virus taxons of the rank
                if ( $num_Vir ) {
                    my @vrow    = ('Unknown', $num_Vir);
                    push @vdata, \@vrow;
                }
            }
            else {  # For general taxon
                my @row = ($rank_name, $num);

                # For ALL taxons of the rank
                push @data, \@row;

                # For Virus taxons of the rank
                push @vdata, \@row if ( $isVir );
            }
        }

        ## data: @data
        ## vdata: @vdata

        # Output ALL taxon statictics
        if ( @data ) {
            my $cur_ws  = $ws{ $rank };

            $cur_ws->write_col('A1', \@data);

            if ($rank eq 'superkingdom') {  # Pie chart for Superkingdom`
                pie_chart($wbook, $cur_ws, \@data, 1);
            }
            else {  # Column chart for other ranks
                column_chart($wbook, $cur_ws, \@data, 1);
            }
        }

        # Output VIRAL taxon statistics
        # Dissmiss 'superkingdom' rank
        if ( @vdata && $rank ne 'superkingdom') {
            my $vrank   = 'v' . $rank;
            my $cur_ws = $ws{ $vrank };

            ## $vrank
            ## @vdata

            $cur_ws->write_col('A1', \@vdata);

            column_chart($wbook, $cur_ws, \@vdata, 1);
        }
    }

    print "Done.\n";
}

#======================================================================
#
#                       Output global summary
#
# * Statistics each taxon of a rank for each barcode
#
#======================================================================


my $fxlsx   = $prefix . 'summary' . '.xlsx';

print "Creating global summary file '$fxlsx' ... ";

my $wbook   = Excel::Writer::XLSX->new($fxlsx)
    or die "[ERROR] Create Excel file '$fxlsx' failed!\n$!\n";

my %ws;

$ws{'superkingdom'}  = $wbook->add_worksheet('Superkingdoms');
$ws{'family'}        = $wbook->add_worksheet('Families');
$ws{'species'}       = $wbook->add_worksheet('Species');

# For virus ranks, add a 'v' before the rank
$ws{'vfamily'}       = $wbook->add_worksheet('Virus Families');
$ws{'vspecies'}      = $wbook->add_worksheet('Virus Species');

##
## Statistics number of taxons for each barcode
##
my %taxon;

=pod taxon

    %taxon = (
        $rank   => {
            $name   => {
                $barcode    => {
                    'num'       => $num,
                }
                'isVirus'   => BOOL,
            }
        }
    );
=cut

my @barcodes;

for my $bcode ( sort ( keys %info ) ) {
    push @barcodes, $bcode;

    ## Barcode: $bcode
    for my $rank ( @ranks ) {
        ## Rank: $rank
 	    for my $rank_name ( sort keys %{ $info{$bcode}->{$rank} } ) {
            ## Name: $name
	        my $num
                = $info{$bcode}->{$rank}->{$rank_name}->{'num'} || 0;
            my $isVir
                = $info{$bcode}->{$rank}->{$rank_name}->{'isVirus'} || 0;
            ## Num: $num
            ## isVir: $isVir


            # push @{ $taxon{$rank}->{$name}->{'num'} }, $num;
            $taxon{$rank}->{$rank_name}->{$bcode}->{'num'}   = $num;
            $taxon{$rank}->{$rank_name}->{'isVirus'}         = $isVir;

            ##
            ## Deal with Viral 'Unknown' taxon
            ##
            if ( $rank_name eq 'Unknown' ) {
                my $num_Virus =
                    $info{$bcode}->{$rank}->{$rank_name}->{'num_Virus'}||0;

                if ( $num_Virus ) {
                    $taxon{$rank}->{'Vir_Unknown'}->{$bcode}->{'num'}
                        = $num_Virus;
                    $taxon{$rank}->{'Vir_Unknown'}->{'isVirus'} = 1;
                }
                else {}
            }
            else {}

        }
    }
}

## @barcodes
## %taxon

# Prepare table head line

for my $rank ( keys %taxon ) {
    my @head    = ($rank, @barcodes);

    my (@data, @vdata);

    push @data, \@head;
    push @vdata, \@head;

    for my $rank_name (sort keys %{ $taxon{ $rank } } ) {
        my @nums;   # Numbers for all barcodes

        for my $bcode ( @barcodes ) {
            my $num = $taxon{$rank}->{$rank_name}->{$bcode}->{'num'} || 0;

            push @nums, $num;
        }

        if ( $rank_name eq 'Vir_Unknown' ) {
            # Output 'Unknwon' instead of 'Vir_Unknown' as the row name
            my @row = ('Unknown', @nums);

            # Do NOT output 'Vir_Unknown' row for the statistics
            # of ALL taxons
            push @vdata, \@row;
        }
        else {
            my @row = ($rank_name, @nums);

            my $isVir   = $taxon{$rank}->{$rank_name}->{'isVirus'};

            push @data, \@row;

            push @vdata, \@row if ( $isVir );
        }

#        my @row     = ($rank_name, @nums);
#
#        my $isVir   = $taxon{$rank}->{$rank_name}->{'isVirus'};
#
#        # Do NOT output 'Vir_Unknown' row for statistics of ALL taxons
#        push @data, \@row if ( $rank_name ne 'Vir_Unknown' );
#
#        # Output 'Unknown' instead of 'Vir_Unknown'
#        # for statistics of Virus taxons
#        my @vrow    = ('Unknown', @nums);
#        push @vdata, \@vrow if ( $isVir );
    }

    # Output to XLSX
    if ( @data ) {      # Output ALL taxon statictics
        my $cur_ws  = $ws{ $rank };

        $cur_ws->write_col('A1', \@data);

        # column_chart($wbook, $cur_ws, \@data, 1);
    }

    if ( @vdata ) {     # Output Viral taxon statistics
        next if ($rank eq 'superkingdom');

        my $vrank   = 'v' . $rank;
        my $cur_ws = $ws{ $vrank };

        $cur_ws->write_col('A1', \@vdata);

        # column_chart($wbook, $cur_ws, \@vdata, 1);
    }
}

print "Done.\n";

exit 0;


#======================================================================
#
#                             Subroutines
#
#======================================================================

=head2 pie_chart
  Name: pie_chart
  Use : pie_chart($workbook, $worksheet, $ra_data, $isEmbedded)
  Func: Create a Pie Chart
  Args:
  Ret : undef for all errors
=cut

sub pie_chart {
    my ($wbook, $wsheet, $ra_data, $isEmbed) = @_;

    $isEmbed = 0 unless (defined $isEmbed);

    my $chart = $wbook->add_chart(
        type     => 'pie',
        embedded => $isEmbed,  # Whether add chart at the same worksheet
    );

    my $num_row = scalar @{ $ra_data };

    my $wsheet_name = $wsheet->get_name();

    $chart->add_series(
        categories  => [ $wsheet_name, 0, $num_row-1, 0, 0 ],
        values      => [ $wsheet_name, 0, $num_row-1, 1, 1 ],
        data_labels => {
            category     => 1,
            value        => 1,
            leader_lines => 1,
            position     => 'best_fit',
        },
    );

    # Insert chart if it were Embedded
    if ( $isEmbed ) {
        $wsheet->insert_chart( 'D1', $chart);
    }
}

=head2 column_chart
  Name: column_chart
  Use : column_chart($wbook, $wsheet, $ra_data, $isEmbed)
  Func: Create a Column chart
  Args:
  Ret : undef for all errors.
=cut

sub column_chart {
    my ($wbook, $wsheet, $ra_data, $isEmbed) = @_;

    $isEmbed = 0 unless (defined $isEmbed);

    my $chart = $wbook->add_chart(
        type     => 'column',
        embedded => $isEmbed,  # Whether add chart at the same worksheet
    );

    my $num_row = scalar @{ $ra_data };

    my $wsheet_name = $wsheet->get_name();

    $chart->add_series(
        categories  => [ $wsheet_name, 0, $num_row-1, 0, 0 ],
        values      => [ $wsheet_name, 0, $num_row-1, 1, 1 ],
#        data_labels => {
#            category     => 1,
#            value        => 1,
#            leader_lines => 1,
#            position     => 'best_fit',
#        },
    );

    # Do not display legend
    $chart->set_legend( none => 1 );

    # Set X axis
    # $chart->set_x_axis( interval_unit => 1 );

    # Insert chart if it were Embedded
    if ( $isEmbed ) {
        $wsheet->insert_chart( 'D1', $chart);
    }

}
